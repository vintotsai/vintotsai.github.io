webpackJsonp([2],{"0M5d":function(s,a,t){s.exports=t("r8Qc")},r8Qc:function(s,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var r={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("section",[t("h1",[s._v("JS 函数式编程")]),s._v(" "),t("h2",[s._v("前言")]),s._v(" "),t("p",[s._v("面向对象编程一直以来都是 JavaScript 中的主导范式。JavaScript 作为一门多范式编程语言，然而，近几年，函数式编程越来越多得受到开发者的青睐。函数式编程是一种强调减少对程序外部状态产生改变的方式。因此，它鼓励使用不可变数据结构和纯函数编程。鼓励使用声明式编程而非命令式编程，通过简而易懂的函数命名方式，描述目标性质，得到想要的结果，而非流程式，指令式。函数式编程既不依赖外部状态，也不修改外部状态，可以使代码更容易理解，维护，测试，不易出错。")]),s._v(" "),t("p",[s._v("-- 引自社区")]),s._v(" "),t("h2",[s._v("五大特性")]),s._v(" "),t("ol",[t("li",[s._v("无副作用")])]),s._v(" "),t("p",[s._v("函数副作用是指当调用函数时，除了返回函数值之外，还对该函数外部的状态产生了改变。函数副作用会给程序设计带来不必要的麻烦，给程序带来潜在的错误，并且降低程序的可读性。")]),s._v(" "),t("p",[s._v("有副作用例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\nfuntion fn(b){\n  a = a+b\n}\nfn("),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a) "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//外部状态a被改变了")]),s._v("\n")])]),s._v(" "),t("p",[s._v("无副作用的例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" a = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v("\nfuntion fn(b){\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a+b\n}\nfn("),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(")\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(a)\n")])]),s._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[s._v("不可变数据")])]),s._v(" "),t("p",[s._v("不可变数据指一个值，一旦被创建，就永远不会发生改变。在 JavaScript 基本数据类型中，数字、字符串和布尔值是永远不变的，但对象和数组的数据结构在某些操作下是可变的。")]),s._v(" "),t("p",[s._v("可变的例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-comment"}},[s._v("// Mutable")]),s._v("\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v("];\narr.push("),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(arr);\n")])]),s._v(" "),t("p",[s._v("不可变例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-comment"}},[s._v("// Immutable")]),s._v("\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" arr = ["),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v("],\n  copyArr;\ncopyArr = arr.concat(["),t("span",{attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]);\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log(arr);\n")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[s._v("纯函数")])]),s._v(" "),t("p",[s._v("纯函数是一种函数，它不改变程序的外部状态，也不会造成数据可变性。纯函数的输出完全依赖于它的输入值，对于相同的输入，永远返回相同的输出。\n重点：1.函数的返回结果只依赖于它的参数 2.函数执行过程中没有副作用")]),s._v(" "),t("p",[s._v("副作用例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-comment"}},[s._v("// An impure function")]),s._v("\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" values = { "),t("span",{attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" };\n\n"),t("span",{attrs:{class:"hljs-function"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{attrs:{class:"hljs-title"}},[s._v("impureFn")]),s._v("("),t("span",{attrs:{class:"hljs-params"}},[s._v("items")]),s._v(") ")]),s._v("{\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" b = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n  items.a = items.a * b + "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" items.a;\n}\n\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" c = impureFn(values);\n"),t("span",{attrs:{class:"hljs-comment"}},[s._v("// 现在 `values.a` 变成 3,  impureFn 改变了它。")]),s._v("\n")])]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" a = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" impure = "),t("span",{attrs:{class:"hljs-function"}},[t("span",{attrs:{class:"hljs-params"}},[s._v("b")]),s._v(" =>")]),s._v(" a + b;\nimpure("),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("// 3")]),s._v("\n")])]),s._v(" "),t("p",[s._v("无副作用例子")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-comment"}},[s._v("// A pure function")]),s._v("\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" values = { "),t("span",{attrs:{class:"hljs-attr"}},[s._v("a")]),s._v(": "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(" };\n\n"),t("span",{attrs:{class:"hljs-function"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("function")]),s._v(" "),t("span",{attrs:{class:"hljs-title"}},[s._v("pureFn")]),s._v("("),t("span",{attrs:{class:"hljs-params"}},[s._v("a")]),s._v(") ")]),s._v("{\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" b = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n\n  a = a * b + "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(";\n\n  "),t("span",{attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a;\n}\n\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" c = pureFn(values.a);\n"),t("span",{attrs:{class:"hljs-comment"}},[s._v("// `values.a` 没有被改变, 它的值仍然是 1")]),s._v("\n")])]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" a = "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("const")]),s._v(" pure = "),t("span",{attrs:{class:"hljs-function"}},[s._v("("),t("span",{attrs:{class:"hljs-params"}},[s._v("x, b")]),s._v(") =>")]),s._v(" x + b;\npure("),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v("); "),t("span",{attrs:{class:"hljs-comment"}},[s._v("//3")]),s._v("\n")])]),s._v(" "),t("p",[s._v("JavaScript 中常用的两个方法 slice 和 splice：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" array1 = ["),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("6")]),s._v("];\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" array2 = ["),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("6")]),s._v("];\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" spliceArray = array1.splice("),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n"),t("span",{attrs:{class:"hljs-keyword"}},[s._v("let")]),s._v(" sliceArray = array2.slice("),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(");\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{attrs:{class:"hljs-string"}},[s._v('"array1: "')]),s._v(" + array1);\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{attrs:{class:"hljs-string"}},[s._v('"spliceArray: "')]),s._v(" + spliceArray);\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{attrs:{class:"hljs-string"}},[s._v('"array2: "')]),s._v(" + array2);\n"),t("span",{attrs:{class:"hljs-built_in"}},[s._v("console")]),s._v(".log("),t("span",{attrs:{class:"hljs-string"}},[s._v('"sliceArray: "')]),s._v(" + sliceArray);\n")])]),s._v(" "),t("p",[s._v("结果为：")]),s._v(" "),t("pre",{pre:!0},[t("code",{attrs:{"v-pre":"",class:"language-js"}},[s._v("array1: "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("6")]),s._v(";\nspliceArray: "),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\narray2: "),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("2")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("3")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("4")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("5")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("6")]),s._v(";\nsliceArray: "),t("span",{attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", "),t("span",{attrs:{class:"hljs-number"}},[s._v("1")]),s._v(";\n")])]),s._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[s._v("函数组合")])]),s._v(" "),t("p",[s._v("函数组合指把多个函数通过嵌套的方式，把函数作为入参传入，把函数作为返回值传出，组合成为一个全新的函数，形成管道数据流。")]),s._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[s._v("函数柯里化")])]),s._v(" "),t("p",[s._v("函数柯里化指把接受多个参数的多参函数转换成每次只接受一个参数的单参函数，并且返回可以接受余下参数的新函数，最大的特点是延迟执行，增加了函数的适用性。")]),s._v(" "),t("h2",[s._v("函数式编程的典型应用")]),s._v(" "),t("p",[s._v("Redux 的设计与用法完全采用函数式编程的理念，建议阅读源码来进一步提升对函数式编程的认识")])])}]},n=t("VU/8")(null,r,!1,null,null,null);a.default=n.exports}});
//# sourceMappingURL=2.9180dc8222edb4b5b861.js.map